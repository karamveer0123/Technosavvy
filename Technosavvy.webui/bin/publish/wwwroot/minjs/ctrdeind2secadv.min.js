var lastPrice, connection, cb = []; function MarketLoad(e) { null == e || e.length <= 0 || (___qf(), ___bf(), e.forEach((function (e, a) { e.mCode.toLowerCase() == __mCode.toLowerCase() && updateTMS(e) }))) } var isClosing = !1; async function SetCon(e) { (connection = (new signalR.HubConnectionBuilder).withAutomaticReconnect([0, 0, 5e3]).withUrl(e, { skipNegotiation: !0, transport: signalR.HttpTransportType.WebSockets }).build()).onclose((async () => { console.log("--\x3e Connection Closed.. "), await Start() })), connection.onreconnecting((e => { console.log("--\x3e onreconnecting "), console.log(e) })), connection.onreconnected((e => { console.log("--\x3e onreconnected "), console.log(e) })), connection.on("UpdateMarket", (function (e) { updateTMS(e) })), connection.on("UpdateBars", (function (e) { var a = buildData(dataBARS.length, e); dataBARS.push(a), updateBars(), displayUpdate() })), connection.on("UpdateAllMarkets", (function (e) { console.log("UpdateAllMarkets received..") })), connection.on("UpdateTrades", (function (e) { !1 !== liveOn && ProcessTrade(e) })), connection.on("UpdateBid", (function (e) { if (null != e) { updateBuyOrder(e[0], !0); for (var a = 1; a < e.length; a++)updateBuyOrder(e[a]) } else console.log("UpdateBid is null") })), connection.on("UpdateAsk", (function (e) { if (console.log("adata", e), null != e) { updateSellOrder(e[0], !0); for (var a = 1; a < e.length; a++)updateSellOrder(e[a]) } else console.log("UpdateAsk is null") })), connection.on("UpdateBid2", (function (e) { if (console.log("adata for 40->", e), null != e) { updateBuyOrderOnly(e[0], !0); for (var a = 1; a < e.length; a++)updateBuyOrderOnly(e[a]) } else console.log("UpdateBid is null") })), connection.on("UpdateAsk2", (function (e) { if (console.log("adata for 40->", e), null != e) { updateSellOrderOnly(e[0], !0); for (var a = 1; a < e.length; a++)updateSellOrderOnly(e[a]) } else console.log("UpdateAsk is null") })), connection.on("UpdateOrders", (function (e) { updateOrders(e) })), connection.on("UpdateTradingCashback", (function (e) { updateCB(e) })), connection.on("CurrencyValUpdate1", (function (e) { console.log("CurrencyValUpdate->") })), connection.on("TokenValUpdate1", (function (e) { console.log("TokenValUpdate->") })), connection.on("TokenSummary", (function (e) { console.log("TokenSummary->") })), connection.on("LogReceiver", (function (e) { console.log(e) })) } async function Start() { try { console.log("attempting to connect.."), connection.start(), console.log("Connected successfully") } catch (e) { console.log(e), setTimeout(start, 5e3) } } async function Refresh() { try { console.log("Refreshing.."), connection.stop(), doConnect(), console.log("Connected successfully") } catch (e) { console.log(e), setTimeout(start, 5e3) } } function LogData(e) { JSON.parse(e) } function load() { doInitialLoad(), doConnect() } function doInitialLoad() { Loadinfo() } function doConnect() { let e = new URL(document.location).searchParams; var a = $("#barTime").val(); null == a | null == a && (a = "1min"), e += "&pl=" + a, SetCon(MktStream + e), Start() } function doStartup() { var e = "Available " + GetFormatCountMBTQ(_qa, __qf) + " " + __q, a = "Available " + GetFormatCountMBTQ(_ba, __bf) + " " + __b; $(".dqa").each((function (a) { $(this).html(e) })), $(".dba").each((function (e) { $(this).html(a) })), $(".dqf").focusout((function (e) { var a = $(this).val(); a > 0 && $(this).val(GetFormatedVal(a, __qf)) })), $(".dbf").focusout((function (e) { var a = $(this).val(); a > 0 && $(this).val(GetFormatedVal(a, __bf)) })) } function Loadinfo() { $.get(MktAPI + "GetMarketSummary", (e => MarketLoad(e))), $.get(MktAPI + "GetRecentTrades?mcode=" + __mCode, (e => updateTrades(e))), $.get(MktAPI + "Cashback", (e => cb = e)), $.get(MktAPI + "GetCurrentCashBackCycle", (e => updateCB(e))) } function ProcessTrade(e) { var a = getTime(e); if (dataBARS[dataBARS.length - 1].time < a) { var t = createOrupdateBAR(a, e); liveBARS.length > 0 ? (liveBARS[liveBARS.length - 1].time < t.time && liveBARS.push(t), displayUpdate(), __CheckAndDisplay()) : (liveBARS.push(t), displayUpdate(), __CheckAndDisplay()), console.log("Last LiveBar timestamp:" + t.time.toString() + "| Trade Time Stamp is:" + a.toString()) } updateTrades(e) } function updateBars() { for (var e = dataBARS[dataBARS.length - 1].y, a = liveBARS.length, t = [], l = 0; l < a; l++)liveBARS[l].y > e && t.push(liveBARS[l]); liveBARS = t, console.log("UPDATE BARS received..") } function updateOrders(e, a) { if (null != e) for (var t = 0; t < e.length; t++)updateBuyOrder(e[t]), updateBuyOrderOnly(e[t]); if (null != a) for (t = 0; t < a.length; t++)updateSellOrder(a[t]), updateSellOrderOnly(a[t]) } function updateBuyOrder(e, a) { var t = $("#mBuyOrders"); a && t.html(""); var l = '<ul class="row-div"><li> ' + GetFormatedValWithSep(e.price, __qf) + " </li><li> " + GetFormatedValAdj(e.amount, __bf) + " </li><li> " + GetFormatedValAdjWithSep(e.price * e.amount, __qf) + " </li></ul>"; t.children().length >= 10 && t.children()[0].remove(), t.append(l) } function updateSellOrder(e, a) { var t = $("#mSellOrders"); a && t.html(""); var l = '<ul class="row-div"><li> ' + GetFormatedValWithSep(e.price, __qf) + " </li><li> " + GetFormatedValAdj(e.amount, __bf) + " </li><li> " + GetFormatedValAdjWithSep(e.price * e.amount, __qf) + " </li></ul>"; t.children().length >= 10 && t.children()[0].remove(), t.append(l) } function updateBuyOrderOnly(e, a) { var t = $("#mBuyOrdersOnly"); a && t.html(""); var l = '<ul class="row-div"><li> ' + GetFormatedValWithSep(e.price, __qf) + " </li><li> " + GetFormatedValAdj(e.amount, __bf) + " </li><li> " + GetFormatedValAdjWithSep(e.price * e.amount, __qf) + " </li></ul>"; t.children().length >= 18 && t.children()[0].remove(), t.append(l) } function updateSellOrderOnly(e, a) { var t = $("#mSellOrdersOnly"); a && t.html(""); var l = '<ul class="row-div"><li> ' + GetFormatedValWithSep(e.price, __qf) + " </li><li> " + GetFormatedValAdj(e.amount, __bf) + " </li><li> " + GetFormatedValAdjWithSep(e.price * e.amount, __qf) + " </li></ul>"; t.children().length >= 18 && t.children()[0].remove(), t.append(l) } function updateTrades(e) { if (null != e.trade) updateOrders(e.bids, e.asks), updateLP(e.trade), updateTradeList(e.trade), lp = e.trade.tradePrice; else for (var a = 0; a < e.length; a++)updateLP(e[a]), updateTradeList(e[a]), lp = e[a] } var lp = 0; function updateLP(e) { if (lp <= e.tradePrice) { var a = '<div class="price-number green"> ' + GetFormatedVal(e.tradePrice, 2) + ' <i class="fa fa-long-arrow-up "></i> </div><div class="sub-number dyCur" data-oval="' + e.tradePrice + '">' + GetFormatedCurrency(e.tradePrice) + " </div>", t = '<div  class="price-txt_div green"> ' + GetFormatedVal(e.tradePrice, 2) + ' <i class="fa fa-long-arrow-up"></i> </div>', l = ' <li class="price-txt green-txtindex">' + GetFormatedVal(e.tradePrice, 2) + '<i class="fa fa-long-arrow-up" aria-hidden="true" ></i></li><li class="l-height"> </li><li class="l-height float-right"><span class="sub-number"> ' + e.tradePrice + "</span></li>"; $("#ptxtm").html(t), $("#toplastprice").html(a), $("#ptBuyOrder").html(l) } else { a = '<div class="price-number red"> ' + GetFormatedVal(e.tradePrice, 2) + ' <i class="fa fa-long-arrow-down "></i> </div><div class="sub-number dyCur" data-oval="' + e.tradePrice + '">' + GetFormatedCurrency(e.tradePrice) + " </div>", t = '<div  class="price-txt_div red"> ' + GetFormatedVal(e.tradePrice, 2) + ' <i class="fa fa-long-arrow-down"></i> </div>', l = ' <li class="price-txt red-txtindex">' + GetFormatedVal(e.tradePrice, 2) + '<i class="fa fa-long-arrow-down" aria-hidden="true" ></i></li><li class="l-height"> </li><li class="l-height float-right"><span class="sub-number"> ' + e.tradePrice + "</span></li>"; $("#ptxtm").html(t), $("#toplastprice").html(a), $("#ptSellOrder").html(l) } lastPrice = e.tradePrice } var IsTradeFirst = !1; function updateTradeList(e) { if (!IsTradeFirst) { var a = '<ul class="price-ul  stickyTop"><li>Price (' + __q + ") <span> </span></li><li>Amount (" + __b + ") <span> </span></li><li>Time </li></ul>"; $("#tradetab77").html(a), IsTradeFirst = !0 } a = ""; a = lp.tradePrice > e.tradePrice ? '<ul class="row-div" ><li class="red">' + GetFormatedValWithSep(e.tradePrice, __qf) + " </li><li> " + GetFormatedVal(e.tradeVolumn, __bf) + " </li><li> " + moment.utc(e.dateTimeUTC.toString()).local().format("hh:mm") + " </li></ul>" : '<ul class="row-div" ><li class="green">' + GetFormatedValWithSep(e.tradePrice, __qf) + " </li><li> " + GetFormatedVal(e.tradeVolumn, __bf) + " </li><li> " + moment.utc(e.dateTimeUTC.toString()).local().format("hh:mm") + " </li></ul>"; var t = $("#tradetab77"); t.children().length >= 12 && t.children()[t.children().length - 1].remove(), t.append(a), t.children()[1].before(t.children()[t.children().length - 1]); new moment.utc(e.dateTimeUTC).local().startOf("second").fromNow() } function updateTMS(e) { console.log("updateTMS", e); var a = '<div class="number-div"><ul><li> 24h <br> Change <span class="css44-up1 ' + (e.change < 0 ? "red" : "green") + '"> ' + GetPercentFormat(e.change, __qf) + "</span>  </li><li> 24h<br> High <span> " + GetFormatedVal(e.highest24H, __qf) + " </span></li><li> 24h<br> Low <span> " + GetFormatedVal(e.lowest24H, __qf) + " </span> </li><li> 24h<br> Volume(" + e.base + ") <span> " + GetFormatedValWithSep(e.volume, 2) + " </span> </li><li> 24h <br>Volume(" + e.quote + ") <span> " + GetFormatedValWithSep(e.trade24Hr, 2) + " </span> </li></ul></div>"; $("#mTop24h").html(a), $("#mName").html(e.name); var t = "(" + e.quote + ")", l = "(" + e.base + ")"; $(".trQuote").html(t), $(".trBase").html(l) } function updateCB(e) { console.log("CashBack Update..>"), console.log(e); var a = ""; a += '<div class="col-detnavtop"><div class="col-detnav"><span><img src="../images/nav-icon.png"> </span><div class="cssnavpr44">', e.TechnoSavvyPrice > e.TechnoSavvyFloorPrice ? a += '<span class="pricecss33-text dyCur" data-oval="' + e.TechnoSavvyPrice + '">' + GetFormatedCurrency(e.TechnoSavvyPrice, __nf) + "</span>" : a += '<span class="pricecss33-text dyCur" data-oval="' + e.TechnoSavvyFloorPrice + '">' + GetFormatedCurrency(e.TechnoSavvyFloorPrice, __nf) + "</span>", a += '</div ></div > <div class="colfloor77">Floor Price: <span class="dyCur" data-oval="' + e.TechnoSavvyFloorPrice + '">' + GetFormatedCurrency(e.TechnoSavvyFloorPrice, 6) + " </span></div></div > ", a += '<div class="col-cashnav"><span class="colcash77" > Cashback</span><span class="colamoun77"><span class="dyCur" data-oval="' + e.cashBack24H + '" > ' + GetFormatedCurrency(e.cashBack24H, 2) + '</span>(24h)</span><span class="colamoun77"><span class="dyCur" data-oval="' + e.cashBackYTD + '"> ' + GetFormatedCurrency(e.cashBackYTD, 2) + "</span>(YTD)</span></div> ", $("#mTopTechnoSavvy").html(a), getCountdown(e), setInterval((() => { getCountdown(e), 0 == $("#tiles span:last-child").text() ? ($("#tiles, .timrdiv54fr ").hide(), $("#left").removeClass("d-none"), $("#left").text("Deposit Soon!")) : ($("#left").addClass("d-none"), $("#tiles, .timrdiv54fr ").show()) }), 1e3) } $(".advance").addClass("active"), $(".fullscreen").click((function (e) { Switch("Fullscreen") })), $(".classic").click((function (e) { Switch("Classic") }));