var con, oo = [], oH = []; async function MyCon(t) { (con = (new signalR.HubConnectionBuilder).withAutomaticReconnect([0, 0, 5e3]).withUrl(t, { skipNegotiation: !0, transport: signalR.HttpTransportType.WebSockets }).build()).onclose((async () => { console.log("--\x3e Connection Closed.. "), await Start() })), con.onreconnecting((t => { console.log("--\x3e onreconnecting "), console.log(t) })), con.onreconnected((t => { console.log("--\x3e onreconnected "), console.log(t) })), con.on("LogReceiver", (function (t) { console.log(t) })), con.on("OpenOrder", (function (t) { oo = t, console.log("OpenOrder"), console.log(t), updateOpenOrders(t), ooCount(oo) })), con.on("OrderHistory", (function (t) { oH = t, console.log("OrderHistory", t), console.log(t), updateOrderHistory(t) })), con.on("TradeHistory", (function (t) { console.log("TradeHistory", t), console.log(t), updateTradeHistory(t) })), con.on("RecentTrade", (function (t) { console.log("RecentTrade"), console.log(t), updateRecentTrades(t) })), con.on("Funds", (function (t) { console.log("Funds"), console.log(t), updateWalletFunds(t) })) } async function myConStart() { try { console.log("attempting to connect.."), null == con && (console.log("first Time initialize"), MyCon(new URL(document.location).origin + "/Stream?mkt=" + __mCode)), con.start(), console.log("Connected successfully") } catch (t) { console.log(t) } } async function myConRefresh() { try { console.log("Refreshing.."), con.stop(), console.log("Connected successfully") } catch (t) { console.log(t), setTimeout(start, 5e3) } } function updateWalletFunds(t) { if (null != t && "undefined" != t) for (var e = 0; e < t.tokens.length; e++) { var a = t.tokens[e]; a.code.toLowerCase() == __q.toLowerCase() && (_qa = a.amount, $("#nquoteavailable").val(a.amount)), a.code.toLowerCase() == __b.toLowerCase() && (_ba = a.amount, $("#nbaseavailable").val(a.amount)) } var l = '<a href="/Deposit"><i class="fa fa-plus-circle" aria-hidden="true"></i></a>', o = "Avl Bal " + GetFormatCountMBTQ(_qa, __qf) + " " + __q + " " + l, d = "Avl Bal " + GetFormatCountMBTQ(_ba, __bf) + " " + __b + " " + l; $(".dqa").each((function (t) { $(this).html(o), $(this).attr("data-val", _qa) })), $(".dba").each((function (t) { $(this).html(d), $(this).attr("data-val", _ba) })), console.log("SpotWallet Updated") } function updateOpenOrders(t) { var e = "", a = t.length; if (console.log("myconclassic", a, t), 0 == a) e += '<tr><td colspan="11"><div class="noheight54"><div class="norecord-div44"><span><img src="../images/no-data.png"></span><span> No records found</span></div></div></td></tr>', $("#tbopenorder").html(e); else { a > 10 && (a = 10); for (var l = 0; l < a; l++) { var o = t[l]; e += "<tr>", e += '   <td class="text-left"><div class="datereward44">', e += "        <span> " + new moment.utc(o.placedOn).local().format("LL") + " </span> <small> " + new moment.utc(o.placedOn).local().format("LT") + "</small></div> </td>", e += '   <td> <span class="d-inline-block opencss11" tabindex="0" data-bs-toggle="popover" data-bs-trigger="hover focus" data-bs-content="' + o.internalOrderID + '" data-bs-original-title="" title="">' + o.internalOrderID.split("-")[0].toUpperCase() + "..</span>  </td>", e += "    <td>" + o.orderTypeT + "</td>", "Buy" == o.orderSideT ? e += '   <td><span class="basegreen">' + o.orderSideT + "</span> </td>" : e += '   <td><span class="basered">' + o.orderSideT + "</span> </td>", e += '<td><div class="datettrade44"><span> ' + GetFormatedVal(o.price, __qf) + "</span> <small> " + __q + " </small></div></td>", e += '<td><div class="datettrade44"><span> ' + GetFormatedVal(o.originalVolume, __bf) + "</span> <small> " + __b + " </small></div></td>", e += '<td><div class="datettrade44"><span> ' + GetFormatedVal(o.currentVolume, __bf) + "</span> <small> " + __b + " </small></div></td>", e += '<td><div class="datettrade44"><span> ' + GetFormatedVal(o.currentVolume * o.price, __qf) + "</span> <small> " + __q + " </small></div></td>", e += '<td><div class="datettrade44"><span> ' + o._OrderSwapTradeValue + "</span> <small> USDT </small></div></td>", o._OrderTrigger > 0 ? e += "    <td>" + o._OrderTrigger + " </td>" : e += "    <td>N/A </td>", e += '   <td class="csscancel44"><button class="btnFetch btnFetch-' + o.internalOrderID + '" onclick="cancelOrder(\'' + o.internalOrderID + "')\"> Cancel </button></td>    </tr>" } $("#tbopenorder").html(e) } } function cancelOrder(t) { var e = { mcode: __mCode, id: t }; $(".btnFetch-" + t).prop("disabled", !0), $(".btnFetch-" + t).html('<i class="fa fa-circle-o-notch fa-spin"></i> Canceling...'), $.ajax({ type: "POST", url: "/Trade/CancelMyOrder", data: e, success: function (e) { $(".btnFetch-" + t).prop("disabled", !0), $(".btnFetch-" + t).html("Canceled") }, error: function (t) { console.log(t.statusCode + ":" + t.statusText + ":" + t.responseText) } }) } function updateOrderHistory(t) { console.log("updateOrderHistory", t); var e = "", a = t.length; if (0 == a) e += '<tr><td colspan="12"><div class="noheight54"><div class="norecord-div44"><span><img src="../images/no-data.png"></span><span> No records found</span></div></div></td></tr>', $("#tbOrderHist").html(e); else { a > 10 && (a = 10); for (var l = 0; l < a; l++) { var o = t[l]; e += '<tr class="text-left">', e += '   <td><div class="datereward44">', e += "        <span> " + new moment.utc(o.placedOn).local().format("LL") + ' </span> <span> <small class="me-0"> ' + new moment.utc(o.placedOn).local().format("LT") + "</small></span></div> </td>", e += '   <td> <span class="d-inline-block opencss11" tabindex="0" data-bs-toggle="popover" data-bs-trigger="hover focus" data-bs-content="' + o.internalOrderID + '" data-bs-original-title="" title="">' + o.internalOrderID.split("-")[0].toUpperCase() + "..</span>  </td>", e += "    <td>" + o.orderTypeT + "</td>", 0 == o.orderSide ? e += '   <td><span class="basegreen">' + o.orderSideT + "</span> </td>" : e += '   <td><span class="basered">' + o.orderSideT + "</span> </td>", e += '   <td> <div class="datettrade44">' + GetFormatedVal(o.price, __qf) + " <small> " + __q + " </small></div></td>", e += '    <td> <div class="datettrade44">' + GetFormatedVal(o.originalVolume, __bf) + " <small>" + __b + "</small></div></td>", e += '   <td nowrap="nowrap"> <div class="datettrade44">' + GetFormatedVal(o.processedVolume, __bf) + "<small> " + __b + "</small></div></td>", e += '    <td> <div class="datettrade44">' + GetFormatedVal(o.processedVolume * o.price, __qf) + " <small> " + __q + "</small></div></td>", o._OrderAssetAmount > 0 ? e += '<td><div class="dflex22"><span> ' + GetFormatedVal(o.originalVolume, __bf) + "</span>  <small>  " + __b + " </small></div></td>" : e += '<td><div class="dflex22"><span class="me-0"> -- </span>  <small>  ' + __b + " </small></div></td>", e += '    <td nowrap="nowrap"> <div class="datettrade44">' + o._OrderSwapTradeValue + " <small> USDT</small></div></td>", o.trigger > 0 ? e += "    <td>" + o.trigger + " </td>" : e += "    <td>N/A </td>", e += '<td nowrap="nowrap"> ' + o.statusT + "</td></tr>" } $("#tbOrderHist").html(e) } } function updateRecentTrades(t) { console.log("updateRecentTrades", t); var e = '<div class="row"><div class="price-list"><ul class="price-ul"><li>Pair<span> </span></li><li>Price <span> </span></li><li>Amount <span> </span></li><li>Time </li></ul>'; t.length; for (var a = 0; a < 15; a++) { var l = t[a]; e += '<ul class="row-div">', 0 == l.orderSide ? e += '<li class="css44-up"> ' + l.marketCode + "</li>" : e += '<li class="css44-down"> ' + l.marketCode + "</li>", e += "<li>" + GetFormatedValAdj(l.tradePrice, _fsl) + "</li>", e += "<li> " + GetFormatedValAdj(l.tradeVolumn, _fsl) + " </li>", e += "<li> " + new moment.utc(l.placedOn).local().format("hh:mm") + " </li>", e += "</ul> " } e += "</div>", e += "</div>", $("#tabred").html(e) } function updateTradeHistory(t) { console.log("updateTradeHistory", t); var e = "", a = t.length; if (0 == a) e += '<tr><td colspan="12"><div class="noheight54"><div class="norecord-div44"><span><img src="../images/no-data.png"></span><span> No records found</span></div></div></td></tr>', $("#tbTradeHist").html(e); else { for (var l = 0; l < a; l++) { var o = t[l]; e += "<tr>", e += '   <td><div class="datereward44">', e += "        <span> " + new moment.utc(o.dateTimeUTC).local().format("LL") + " </span> <span> <small> " + new moment.utc(o.dateTimeUTC).local().format("LT") + "</small></span></div> </td>", e += '   <td> <span class="d-inline-block opencss11" tabindex="0" data-bs-toggle="popover" data-bs-trigger="hover focus" data-bs-content="' + o.tradeId + '" data-bs-original-title="" title="">' + o.tradeId.split("-")[0].toUpperCase() + "..</span>  </td>", 0 == o.orderSide ? e += '    <td class="basegreen">' + o.orderSideT + "</td>" : e += '    <td class="basered">' + o.orderSideT + "</td>", e += "    <td>" + o.orderTypeT + "</td>", e += '   <td><div class="datettrade44"><span>' + GetFormatedVal(o.tradePrice, __qf) + "</span> <small> " + __q + " </small></div></td>", e += '    <td><div class="datettrade44"><span>' + GetFormatedVal(o.tradeVolumn, __bf) + "</span> <small>" + __b + "</small></div></td>", e += '   <td nowrap="nowrap"><div class="datettrade44"><span>' + GetFormatedVal(o.tradeValue, __qf) + "</span><small> " + __q + "</small></div></td>", e += "    <td>" + GetFormatedVal(o._AssetAmountValue, __qf) + " </td>", e += '    <td><div class="datettrade44"><span>' + GetFormatedVal(o._CashBackTechnoSavvyValue, __qf) + "</span><small> USDT</small></div> </td>", e += "    <td>" + GetFormatedVal(o._PoolRefund, __qf) + " </td>", e += "    <td>" + GetFormatedVal(o._AssetAmount * o.tradePrice + o._CashBackTechnoSavvyValue, __qf) + " </td>", e += '   <td> <span class="d-inline-block opencss11" tabindex="0" data-bs-toggle="popover" data-bs-trigger="hover focus" data-bs-content="' + o.orderID + '" data-bs-original-title="" title="">' + o.orderID.split(".")[2] + "-" + o.orderID.split(".")[3] + "</span>  </td>" } $("#tbTradeHist").html(e) } } function XXupdateTradeList(t) { var e = ""; e = (lp, t.tradePrice, '<ul class="row-div" ><li class="green">' + GetFormatedValWithSep(t.tradePrice, __qf) + " </li><li> " + GetFormatedVal(t.tradeVolumn, __bf) + " </li><li> " + moment.utc(t.dateTimeUTC.toString()).local().format("hh:mm:ss") + " </li></ul>"); var a = $("#tradetab77"); a.children().length >= 14 && a.children()[a.children().length - 1].remove(), a.append(e), a.children()[1].before(a.children()[a.children().length - 1]); new moment.utc(t.dateTimeUTC).local().startOf("second").fromNow() } function ooCount(t) { $("#tbopenorder tr").length; $("#ooCount").html(t.length) }